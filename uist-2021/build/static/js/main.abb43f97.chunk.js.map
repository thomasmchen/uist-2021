{"version":3,"sources":["components/Navbar/MenuItems.js","components/Button.js","components/Navbar/Navbar.js","components/SpansView/Segment.js","components/SpansView/SpansView.js","components/QAView/QAView.js","components/SpeakerView/SpeakerView.js","components/AboutView/AboutView.js","components/DataContainer/DataContainer.js","components/AudioSelector/AudioSelector.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","className","Navbar","state","clicked","handleClick","setState","this","map","item","index","to","Component","Segment","props","id","text","ifArrayIntersect","array1","array2","set2","Set","i","length","has","TemporalView","useState","rawItems","setRawItems","lowItems","setLowItems","medItems","setMedItems","highItems","setHighItems","raw","useEffect","absoluteStart","start","duration","end","rawMappedItems","element","name","ids","rawDurationMap","forEach","e","lowMappedItems","low","join","reduce","p","c","medMappedItems","med","highMappedItems","high","idx","classnames","selectedIds","style","flex","toFixed","setSelected","HighCol","segments","segment","GenericCol","filter","SpansView","setSelectedIds","audioData","QAView","SpeakerView","AboutView","DataContainer","setAudioData","audioName","fetch","headers","then","response","json","data","catch","error","console","log","path","AudioSelector","selectedAudio","onChange","target","value","audios","audio","App","handleChange","selectedAudioData","AudioIndexData","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kdAAaA,EAAY,CACrB,CACIC,MAAO,OACPC,IAAK,aACLC,MAAO,aAEX,CACIF,MAAQ,UACRC,IAAK,wBACLC,MAAO,aAEX,CACIF,MAAQ,MACRC,IAAK,qBACLC,MAAO,aAEX,CACIF,MAAQ,WACRC,IAAK,0BACLC,MAAO,aAEX,CACIF,MAAQ,WACRC,IAAK,0BACLC,MAAO,qB,eCrBTC,EAAS,CACX,eACA,gBAGEC,EAAQ,CACV,cACA,cAGSC,EAAS,SAAC,GAMhB,IALHC,EAKE,EALFA,SACAC,EAIE,EAJFA,KACAC,EAGE,EAHFA,QACAC,EAEE,EAFFA,YACAC,EACE,EADFA,WAEMC,EAAmBR,EAAOS,SAASH,GAAeA,EAAcN,EAAO,GACvEU,EAAkBT,EAAMQ,SAASF,GAAcA,EAAaN,EAAM,GAExE,OACI,wBAAQU,UAAS,cAASH,EAAT,YAA6BE,GAAmBL,QAASA,EAASD,KAAMA,EAAzF,SACKD,K,gBCYES,E,4MA9BXC,MAAQ,CAAEC,SAAS,G,EAEnBC,YAAc,WACV,EAAKC,SAAS,CAAEF,SAAU,EAAKD,MAAMC,W,4CAGzC,WACI,OACI,sBAAKH,UAAU,cAAf,UACI,qBAAIA,UAAU,cAAd,qBAAoC,mBAAGA,UAAU,6BACjD,qBAAKA,UAAU,YAAYN,QAASY,KAAKF,YAAzC,SACI,mBAAGJ,UAAWM,KAAKJ,MAAMC,QAAU,eAAiB,kBAExD,oBAAIH,UAAWM,KAAKJ,MAAMC,QAAU,kBAAoB,WAAxD,SACKlB,EAAUsB,KAAK,SAACC,EAAMC,GACnB,OACI,oBAAgBT,UAAWQ,EAAKpB,MAAhC,SACI,cAAC,IAAD,CAASsB,GAAIF,EAAKrB,IAAlB,SAAwBqB,EAAKtB,SADxBuB,QAMrB,cAAC,EAAD,UACI,cAAC,IAAD,CAASC,GAAG,gBAAZ,+B,GAxBCC,a,eCUNC,MAdf,SAAiBC,GACb,OACI,qBAAKb,UAAU,UAAf,SACI,sBAAKA,UAAY,uBAAjB,UACI,qBAAKA,UAAU,qBAAf,SACI,mBAAGA,UAAU,gBAAb,SAA8Ba,EAAMC,OAExC,qBAAKd,UAAU,uBAAf,SACI,mBAAGA,UAAU,kBAAb,SAAgCa,EAAME,e,yBCLpDC,EAAmB,SAACC,EAAQC,GAE9B,IADA,IAAMC,EAAO,IAAIC,IAAIF,GACbG,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IAC9B,GAAIF,EAAKI,IAAIN,EAAOI,IAAK,OAAO,EAEpC,OAAO,GAGX,SAASG,EAAaX,GAAQ,IAAD,EACOY,mBAAS,IADhB,mBAClBC,EADkB,KACRC,EADQ,OAEOF,mBAAS,IAFhB,mBAElBG,EAFkB,KAERC,EAFQ,OAGOJ,mBAAS,IAHhB,mBAGlBK,EAHkB,KAGRC,EAHQ,OAISN,mBAAS,IAJlB,mBAIlBO,EAJkB,KAIPC,EAJO,KAOnBC,EAAQrB,EAARqB,IAiDN,OAhDAC,qBAAU,WACN,GAAKtB,EAAMqB,IAAX,CAGA,IAAME,EAAgBvB,EAAMqB,IAAI,GAAGG,MAE7BC,EADczB,EAAMqB,IAAIrB,EAAMqB,IAAIZ,OAAS,GAAGiB,IACrBH,EACzBI,EAAiB3B,EAAMqB,IAAI3B,KAAI,SAAAkC,GACjC,MAAO,CACHC,KAAMD,EAAQ3B,GAAG,GACjBwB,UAAWG,EAAQF,IAAME,EAAQJ,OAASC,EAC1CK,IAAKF,EAAQ3B,OAGjB8B,EAAiB,GACrBJ,EAAeK,SAAQ,SAAAC,GAAC,OAAIF,EAAeE,EAAEJ,MAAQI,EAAER,YAGvD,IAAMS,EAAiBlC,EAAMmC,IAAIzC,KAAI,SAAAkC,GACjC,MAAO,CACHC,KAAMD,EAAQ3B,GAAGmC,KAAK,MACtBX,SAAUG,EAAQ3B,GAAGoC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIP,EAAeQ,KAAI,GAC7DT,IAAKF,EAAQ3B,OAIfuC,EAAiBxC,EAAMyC,IAAI/C,KAAI,SAAAkC,GACjC,MAAO,CACHC,KAAMD,EAAQ3B,GAAGmC,KAAK,MACtBX,SAAUG,EAAQ3B,GAAGoC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIP,EAAeQ,KAAI,GAC7DT,IAAKF,EAAQ3B,OAIfyC,EAAkB1C,EAAM2C,KAAKjD,KAAI,SAAAkC,GACnC,MAAO,CACHC,KAAMD,EAAQ3B,GAAGmC,KAAK,MACtBX,SAAUG,EAAQ3B,GAAGoC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIP,EAAeQ,KAAI,GAC7DT,IAAKF,EAAQ3B,OAIrBa,EAAYa,GACZX,EAAYkB,GACZhB,EAAYsB,GACZpB,EAAasB,MACd,CAACrB,IAGA,sBAAKlC,UAAU,WAAf,UACI,sBAAKA,UAAU,MAAf,UACI,mBAAGA,UAAU,QAAb,iBACA,qBAAKA,UAAU,WAAf,SACK0B,EAASnB,KAAI,SAACkC,EAASgB,GAAV,OACV,qBAAezD,UAAW0D,IAAW,CAAC,SAAY1C,EAAiByB,EAAQE,IAAK9B,EAAM8C,aAAc,MAAQ,IACxGC,MAAO,CAACC,KAAK,GAAD,QAAyB,IAAnBpB,EAAQH,UAAgBwB,QAAQ,GAAtC,YACZpE,QAAS,kBAAMmB,EAAMkD,YAAYtB,EAAQE,OAFnCc,WAKtB,sBAAKzD,UAAU,MAAf,UACI,mBAAGA,UAAU,QAAb,iBACA,qBAAKA,UAAU,WAAf,SACK4B,EAASrB,KAAI,SAACkC,EAASgB,GAAV,OACV,qBAAezD,UAAW0D,IAAW,CAAC,SAAY1C,EAAiByB,EAAQE,IAAK9B,EAAM8C,aAAc,MAAQ,IACxGC,MAAO,CAACC,KAAK,GAAD,QAAyB,IAAnBpB,EAAQH,UAAgBwB,QAAQ,GAAtC,YACZpE,QAAS,kBAAMmB,EAAMkD,YAAYtB,EAAQE,OAFnCc,WAKtB,sBAAKzD,UAAU,MAAf,UACI,mBAAGA,UAAU,QAAb,iBACA,qBAAKA,UAAU,WAAf,SACK8B,EAASvB,KAAI,SAACkC,EAASgB,GAAV,OACV,qBAAezD,UAAW0D,IAAW,CAAC,SAAY1C,EAAiByB,EAAQE,IAAK9B,EAAM8C,aAAc,MAAQ,IACxGC,MAAO,CAACC,KAAK,GAAD,QAAyB,IAAnBpB,EAAQH,UAAgBwB,QAAQ,GAAtC,YACZpE,QAAS,kBAAMmB,EAAMkD,YAAYtB,EAAQE,OAFnCc,WAKtB,sBAAKzD,UAAU,MAAf,UACI,mBAAGA,UAAU,QAAb,kBACA,qBAAKA,UAAU,YAAf,SACKgC,EAAUzB,KAAI,SAACkC,EAASgB,GAAV,OACX,qBAAezD,UAAW0D,IAAW,CAAC,SAAY1C,EAAiByB,EAAQE,IAAK9B,EAAM8C,aAAc,MAAQ,IACxGC,MAAO,CAACC,KAAK,GAAD,QAAyB,IAAnBpB,EAAQH,UAAgBwB,QAAQ,GAAtC,YACZpE,QAAS,kBAAMmB,EAAMkD,YAAYtB,EAAQE,OAFnCc,cASlC,SAASO,EAAQnD,GAIb,OACI,sBAAKb,UAAU,qBAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,oBAAIA,UAAU,cAAd,yBAEJ,qBAAKA,UAAU,OAAf,SACMa,EAAMoD,SACH1D,KAAI,SAAC2D,EAAST,GAAV,OACD,qBAAe/D,QAAS,kBAAMmB,EAAMkD,YAAYG,EAAQpD,KAAKd,UAAW0D,IAAW,CAAC,SAAY1C,EAAiBkD,EAAQpD,GAAID,EAAM8C,aAAc,MAAQ,IAAzJ,SACI,cAAC,EAAD,CAAS5C,KAAMmD,EAAQnD,KAAMD,GAAIoD,EAAQpD,GAAGmC,KAAK,SAD3CQ,WASlC,SAASU,EAAWtD,GAIhB,OACI,sBAAKb,UAAS,qCAAgCa,EAAM3B,OAApD,UACI,qBAAKc,UAAU,uBAAf,SACI,qBAAIA,UAAU,cAAd,UAA6Ba,EAAM3B,MAAnC,aAEJ,qBAAKc,UAAU,OAAf,SACMa,EAAMoD,SACCG,QAAO,SAAAF,GAAO,OAAIlD,EAAiBkD,EAAQpD,GAAID,EAAM8C,gBACrDpD,KAAI,SAAC2D,EAAST,GAAV,OACD,qBAAezD,UAAW0D,IAAW,CAAC,UAAY,EAAM,MAAQ,IAAhE,SACI,cAAC,EAAD,CAAS3C,KAAMmD,EAAQnD,KAAMD,GAAIoD,EAAQpD,GAAGmC,KAAK,SAD3CQ,WA+CvBY,MAtCf,SAAmBxD,GAAQ,IAAD,EACgBY,mBAAS,IADzB,mBACfkC,EADe,KACFW,EADE,KAIhBC,EAAc1D,EAAd0D,UAGN,OAFApC,qBAAU,kBAAMmC,EAAe,QAAO,CAACC,IAElC1D,EAAM0D,UAUP,gCACI,oBAAIvE,UAAU,QAAd,0BACA,8BACI,cAACwB,EAAD,CACIU,IAAKrB,EAAM0D,UAAN,aACLf,KAAM3C,EAAM0D,UAAN,cACNjB,IAAKzC,EAAM0D,UAAN,aACLvB,IAAKnC,EAAM0D,UAAN,aACLZ,YAAaA,EAAaI,YAAaO,MAE/C,sBAAKtE,UAAU,yBAAf,UACI,cAACgE,EAAD,CAASC,SAAUpD,EAAM0D,UAAN,cAAqCZ,YAAaA,EAAaI,YAAaO,IAC/F,cAACH,EAAD,CAAYjF,MAAM,SAAS+E,SAAUpD,EAAM0D,UAAN,aAAoCZ,YAAaA,IACtF,cAACQ,EAAD,CAAYjF,MAAM,MAAM+E,SAAUpD,EAAM0D,UAAN,aAAoCZ,YAAaA,IACnF,cAACQ,EAAD,CAAYjF,MAAM,MAAM+E,SAAUpD,EAAM0D,UAAN,aAAoCZ,YAAaA,UAtBvF,gCACI,8CACA,6DC1JDa,E,4JARX,WACI,OACI,8BACI,8C,GAJK7D,aCSN8D,E,4JARX,WACI,OACI,8BACI,mD,GAJU9D,aCSX+D,G,kKARX,WACI,OACI,8BACI,iD,GAJQ/D,cCyDTgE,MAlDf,SAAuB9D,GAAQ,IAAD,EACQY,mBAAS,MADjB,mBACnB8C,EADmB,KACRK,EADQ,KAIpBC,EAAchE,EAAdgE,UAuBN,OAtBA1C,qBAAU,WACN,GAAK0C,EAAL,CAGIC,MAAM,WAAD,OAAYD,EAAZ,SAA8B,CAC/BE,QAAU,CACN,eAAgB,mBAChB,OAAU,sBAGbC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHP,EAAaO,MAEhBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,SAKzB,CAACR,IAGA,qBAAK7E,UAAU,gBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwF,KAAK,wBAAZ,SACI,cAAC,EAAD,CAAWxF,UAAU,YAAY6E,UAAWhE,EAAMgE,UAAWN,UAAWA,MAE5E,cAAC,IAAD,CAAOiB,KAAK,qBAAZ,SACI,cAAC,EAAD,CAAQxF,UAAU,YAAY6E,UAAWhE,EAAMgE,UAAWN,UAAWA,MAEzE,cAAC,IAAD,CAAOiB,KAAK,0BAAZ,SACI,cAAC,EAAD,CAAaxF,UAAU,YAAY6E,UAAWhE,EAAMgE,UAAWN,UAAWA,MAE9E,cAAC,IAAD,CAAOiB,KAAK,0BAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACI,6CCzBLC,G,kKAvBX,WAAW,IAAD,OACN,OACI,sBAAKzF,UAAU,0BAAf,UACI,oBAAGA,UAAU,oBAAb,wCAA4D,iCAAUM,KAAKO,MAAM6E,cAAiFpF,KAAKO,MAAM6E,cAA5E,sBAAM1F,UAAU,sBAAhB,oCACjG,gCACI,uBAAOA,UAAU,mBAAjB,8BACA,wBACIA,UAAU,gBACV0C,KAAK,cACLiD,SAAU,SAAA7C,GAAC,OAAI,EAAKjC,MAAM8E,SAAS7C,EAAE8C,OAAOC,QAHhD,SAKKvF,KAAKO,MAAMiF,OAAOvF,KAAI,SAACwF,GAAD,OACnB,iCACCA,EAAMF,OADME,EAAMjF,mB,GAbnBH,c,QCqCbqF,G,wDA/Bb,WAAYnF,GAAQ,IAAD,8BACjB,cAAMA,IAORoF,aAAe,SAAAF,GACb,GAAc,KAAVA,EAGA,OAFA,EAAK1F,SAAS,CAAEqF,cAAe,UAC/B,EAAKrF,SAAS,CAAE6F,kBAAmB,KAIvC,EAAK7F,SAAS,CAAEqF,cAAeK,KAb/B,EAAK7F,MAAQ,CACX4F,OAAQK,EACRT,cAAe,IAJA,E,0CAkBnB,WACE,OACE,qBAAK1F,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAe8F,OAAQxF,KAAKJ,MAAM4F,OAAQJ,cAAepF,KAAKJ,MAAMwF,cAAeC,SAAUrF,KAAK2F,eAClG,cAAC,EAAD,CAAepB,UAAWvE,KAAKJ,MAAMwF,yB,GAzB7BU,IAAMzF,YCIT0F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.abb43f97.chunk.js","sourcesContent":["export const MenuItems = [\r\n    {\r\n        title: 'Home',\r\n        url: '/uist-2021',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'Explore',\r\n        url: '/uist-2021/data/spans',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'Q&A',\r\n        url: '/uist-2021/data/qa',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'Speakers',\r\n        url: '/uist-2021/data/speaker',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'About Us',\r\n        url: '/uist-2021/static/about',\r\n        cName: 'nav-links-mobile'\r\n    },\r\n]","import React from 'react'\r\nimport './Button.css'\r\n\r\nconst STYLES = [\r\n    'btn--primary',\r\n    'btn--outline'\r\n]\r\n\r\nconst SIZES = [\r\n    'btn--medium',\r\n    'btn--large'\r\n]\r\n\r\nexport const Button = ({\r\n    children,\r\n    type,\r\n    onClick,\r\n    buttonStyle,\r\n    buttonSize\r\n}) => {\r\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]\r\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0]\r\n\r\n    return(\r\n        <button className={`btn ${checkButtonStyle} ${checkButtonSize}`} onClick={onClick} type={type}>\r\n            {children}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport { Button } from \"../Button\"\r\nimport './Navbar.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n    state = { clicked: false }\r\n    \r\n    handleClick = () => {\r\n        this.setState({ clicked: !this.state.clicked })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <nav className=\"NavbarItems\">\r\n                <h1 className=\"navbar-logo\">Contoso <i className=\"fab fa-affiliatetheme\"></i></h1>\r\n                <div className=\"menu-icon\" onClick={this.handleClick}>\r\n                    <i className={this.state.clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\r\n                </div>\r\n                <ul className={this.state.clicked ? 'nav-menu active' : 'nav-menu'}>\r\n                    {MenuItems.map( (item, index) => {\r\n                        return(\r\n                            <li key={index} className={item.cName}>\r\n                                <NavLink to={item.url}>{item.title}</NavLink>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n                <Button>\r\n                    <NavLink to=\"/static/about\">About Us</NavLink>\r\n                </Button>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\nfunction Segment(props) {\r\n    return (\r\n        <div className=\"Segment\">\r\n            <div className = \"SegmentDataContainer\">\r\n                <div className=\"SegmentIdContainer\">\r\n                    <p className=\"SegmentIdText\">{props.id}</p>\r\n                </div>\r\n                <div className=\"SegmentTextContainer\">\r\n                    <p className=\"SegmentTextText\">{props.text}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Segment","import React, { useState, useEffect } from 'react'\r\nimport Segment from './Segment'\r\nimport \"./SpansView.css\"\r\nimport classnames from 'classnames';\r\n\r\nconst ifArrayIntersect = (array1, array2) => {\r\n    const set2 = new Set(array2);\r\n    for(let i = 0; i < array1.length; i++) {\r\n        if (set2.has(array1[i])) return true;\r\n    }\r\n    return false\r\n}\r\n\r\nfunction TemporalView(props) {\r\n    const [rawItems, setRawItems] = useState([])\r\n    const [lowItems, setLowItems] = useState([])\r\n    const [medItems, setMedItems] = useState([])\r\n    const [highItems, setHighItems] = useState([])\r\n\r\n    // only run when `raw` changes\r\n    let { raw } = props;\r\n    useEffect(() => {\r\n        if (!props.raw) return;\r\n\r\n        // convert all start-end to % duration\r\n        const absoluteStart = props.raw[0].start\r\n        const absoluteEnd = props.raw[props.raw.length - 1].end\r\n        const duration = absoluteEnd - absoluteStart\r\n        const rawMappedItems = props.raw.map(element => {\r\n            return {\r\n                name: element.id[0],\r\n                duration: (element.end - element.start) / duration,\r\n                ids: element.id\r\n            }\r\n        })\r\n        let rawDurationMap = {}\r\n        rawMappedItems.forEach(e => rawDurationMap[e.name] = e.duration)\r\n\r\n        // convert all other items to width= sum(associated segments duration)\r\n        const lowMappedItems = props.low.map(element => {\r\n            return {\r\n                name: element.id.join(\", \"),\r\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\r\n                ids: element.id\r\n            }\r\n        })\r\n\r\n        const medMappedItems = props.med.map(element => {\r\n            return {\r\n                name: element.id.join(\", \"),\r\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\r\n                ids: element.id\r\n            }\r\n        })\r\n\r\n        const highMappedItems = props.high.map(element => {\r\n            return {\r\n                name: element.id.join(\", \"),\r\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\r\n                ids: element.id\r\n            }\r\n        })\r\n\r\n        setRawItems(rawMappedItems)\r\n        setLowItems(lowMappedItems)\r\n        setMedItems(medMappedItems)\r\n        setHighItems(highMappedItems)\r\n    }, [raw])\r\n\r\n    return (\r\n        <div className=\"temporal\">\r\n            <div className=\"row\">\r\n                <p className=\"label\">Raw</p>\r\n                <div className=\"data raw\">\r\n                    {rawItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => props.setSelected(element.ids)}></div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <p className=\"label\">Low</p>\r\n                <div className=\"data low\">\r\n                    {lowItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => props.setSelected(element.ids)}></div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <p className=\"label\">Med</p>\r\n                <div className=\"data med\">\r\n                    {medItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => props.setSelected(element.ids)}></div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <p className=\"label\">High</p>\r\n                <div className=\"data high\">\r\n                    {highItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => props.setSelected(element.ids)}></div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction HighCol(props) {\r\n    // takes in segments prop\r\n    // takes in selectedIds prop\r\n    // takes in setSelected prop\r\n    return (\r\n        <div className=\"SegmentColumn High\">\r\n            <div className=\"ColumnTitleContainer\">\r\n                <h2 className=\"ColumnTitle\">High Pass</h2>\r\n            </div>\r\n            <div className=\"data\">\r\n                { props.segments\r\n                    .map((segment, idx) =>\r\n                        <div key={idx} onClick={() => props.setSelected(segment.id)} className={classnames({'selected': ifArrayIntersect(segment.id, props.selectedIds), \"item\": true})}>\r\n                            <Segment text={segment.text} id={segment.id.join(\", \")}></Segment>\r\n                        </div>\r\n                    ) }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GenericCol(props) {\r\n    // takes in title prop\r\n    // takes in segments prop\r\n    // takes in selectedIds prop\r\n    return (\r\n        <div className={`SegmentColumn notclickable ${props.title}`}>\r\n            <div className=\"ColumnTitleContainer\">\r\n                <h2 className=\"ColumnTitle\">{props.title} Pass</h2>\r\n            </div>\r\n            <div className=\"data\">\r\n                { props.segments\r\n                        .filter(segment => ifArrayIntersect(segment.id, props.selectedIds))\r\n                        .map((segment, idx) =>\r\n                            <div key={idx} className={classnames({'selected': true, \"item\": true})}>\r\n                                <Segment text={segment.text} id={segment.id.join(\", \")}></Segment>\r\n                            </div>\r\n                        ) }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SpansView(props) {\r\n    const [selectedIds, setSelectedIds] = useState([])\r\n\r\n    // reset selectedId on audioData change\r\n    let { audioData } = props;\r\n    useEffect(() => setSelectedIds(null), [audioData])\r\n\r\n    if (!props.audioData) {\r\n        return (\r\n            <div>\r\n                <h1>Explore View</h1>\r\n                <p>No audio sample selected</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"Title\">Explore View</h1>\r\n            <div>\r\n                <TemporalView\r\n                    raw={props.audioData[\"raw\"][\"segments\"]}\r\n                    high={props.audioData[\"high\"][\"segments\"]}\r\n                    med={props.audioData[\"med\"][\"segments\"]}\r\n                    low={props.audioData[\"low\"][\"segments\"]}\r\n                    selectedIds={selectedIds} setSelected={setSelectedIds} />\r\n            </div>\r\n            <div className=\"SegmentColumnContainer\">\r\n                <HighCol segments={props.audioData[\"high\"][\"segments\"]} selectedIds={selectedIds} setSelected={setSelectedIds} />\r\n                <GenericCol title=\"Medium\" segments={props.audioData[\"med\"][\"segments\"]} selectedIds={selectedIds} />\r\n                <GenericCol title=\"Low\" segments={props.audioData[\"low\"][\"segments\"]} selectedIds={selectedIds} />\r\n                <GenericCol title=\"Raw\" segments={props.audioData[\"raw\"][\"segments\"]} selectedIds={selectedIds} />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpansView\r\n","import React, { Component } from 'react';\r\n\r\nclass QAView extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>QAView</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default QAView","import React, { Component } from 'react';\r\n\r\nclass SpeakerView extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>SpeakerView</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SpeakerView","import React, { Component } from 'react';\r\n\r\nclass AboutView extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>AboutView</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AboutView","import React, { useState, useEffect } from 'react'\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport SpansView from \"../SpansView/SpansView\"\r\nimport QAView from \"../QAView/QAView\"\r\nimport SpeakerView from \"../SpeakerView/SpeakerView\"\r\nimport './DataContainer.css'\r\nimport AboutView from '../AboutView/AboutView'\r\n\r\n\r\nfunction DataContainer(props) {\r\n    const [audioData, setAudioData] = useState(null)\r\n\r\n    // fetch data on audioName change\r\n    let { audioName } = props;\r\n    useEffect(() => {\r\n        if (!audioName) return;\r\n\r\n        const fetchData = () => {\r\n            fetch(`../data/${audioName}.json`, {\r\n                headers : { \r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                    }\r\n                })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    setAudioData(data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        };\r\n        \r\n        fetchData();\r\n    }, [audioName]);\r\n\r\n    return (\r\n        <div className=\"DataContainer\">\r\n            <Switch>\r\n                <Route path=\"/uist-2021/data/spans\">\r\n                    <SpansView className=\"SpansView\" audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/data/qa\">\r\n                    <QAView className=\"SpansView\" audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/data/speaker\">\r\n                    <SpeakerView className=\"SpansView\" audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/static/about\">\r\n                    <AboutView />\r\n                </Route>\r\n                <Route path=\"/uist-2021\">\r\n                    <p>Home</p>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataContainer","import React, { Component } from 'react';\r\nimport './AudioSelector.css'\r\n\r\nclass AudioSelector extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"AudioSelectionContainer\">\r\n                <p className=\"CurrentAudioLabel\">Currently Analyzing Audio: <strong>{!this.props.selectedAudio ? <samp className=\"NoAudioSelectedText\">No Audio Selected</samp> : this.props.selectedAudio}</strong></p>\r\n                <div>\r\n                    <label className=\"SelectAudioLabel\">Select an Audio:</label>\r\n                    <select \r\n                        className=\"AudioSelector\"\r\n                        name=\"AudioSelect\"\r\n                        onChange={e => this.props.onChange(e.target.value)}\r\n                    >\r\n                        {this.props.audios.map((audio) => (\r\n                            <option key={audio.id}>\r\n                            {audio.value}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AudioSelector","import Navbar from \"./components/Navbar/Navbar\"\nimport DataContainer from \"./components/DataContainer/DataContainer\"\nimport AudioSelector from \"./components/AudioSelector/AudioSelector\"\nimport AudioIndexData from \"./data/index.json\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport './App.css';\nimport React from \"react\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      audios: AudioIndexData,\n      selectedAudio: \"\"\n    }\n  }\n\n  handleChange = audio => {\n    if (audio === \"\") {\n        this.setState({ selectedAudio: \"\"})\n        this.setState({ selectedAudioData: \"\"})\n        return;\n    }\n\n    this.setState({ selectedAudio: audio });\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <Router>\n          <Navbar/>\n          <AudioSelector audios={this.state.audios} selectedAudio={this.state.selectedAudio} onChange={this.handleChange} />\n          <DataContainer audioName={this.state.selectedAudio}/>\n        </Router>\n      </div>\n    )\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}