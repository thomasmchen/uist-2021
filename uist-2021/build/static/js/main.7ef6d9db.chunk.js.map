{"version":3,"sources":["components/Navbar/MenuItems.js","components/Button.js","components/Navbar/Navbar.js","components/SpansView/Segment.js","components/SpansView/SpansView.js","components/QAView/QAView.js","components/SpeakerView/Speech.js","components/SpeakerView/SpeakerView.js","components/AboutView/AboutView.js","components/UnifiedView/SimpleSegment.js","components/UnifiedView/AudioSegment.js","components/UnifiedView/UnifiedView.js","components/DataContainer/DataContainer.js","components/AudioSelector/AudioSelector.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","className","Navbar","state","clicked","handleClick","setState","this","map","item","index","to","Component","Segment","props","Highlight","require","adjustedStartTime","start","adjustedEndTime","end","sequence","speaker","src","audioName","controls","classnames","label","phrase","isSelected","search","text","ifArrayIntersect","array1","array2","set2","Set","i","length","has","TitleView","image","subtitle","date","TemporalView","useState","rawItems","setRawItems","lowItems","setLowItems","medItems","setMedItems","highItems","setHighItems","raw","useEffect","absoluteStart","duration","rawMappedItems","element","name","id","ids","rawDurationMap","forEach","e","lowMappedItems","low","join","reduce","p","c","medMappedItems","med","highMappedItems","high","idx","selectedIds","style","flex","toFixed","setSelected","setHighSelected","HighCol","segments","segment","ref","selectedRef","GenericCol","filter","SpansView","setSelectedIds","highSelectedIdx","setHighSelectedIdx","useRef","audioData","current","scrollIntoView","behavior","block","QAView","Speech","SpeakerView","AboutView","segmentEnd","slice","info","information_contained","quality","tempLifeTimeSelected","lifetimeSelectedIds","push","setLifetimeSelectedIds","onTemporalSegmentclick","Math","trunc","round","getTotalInfo","highSums","rawSums","console","log","baseShortInfoTotal","deltaInfo","delta","MainSummary","rawSegments","onSegmentClick","SimpleSegment","getStartTime","array","getEndTime","DetailSummary","AudioSegment","UnifiedView","informationShown","setInformationShown","detailRef","document","querySelector","scrollTo","top","left","DataContainer","setAudioData","fetch","headers","then","response","json","data","catch","error","path","AudioSelector","selectedAudio","onChange","target","value","defaultValue","selected","disabled","audios","audio","App","handleChange","selectedAudioData","AudioIndexData","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ef6d9db.chunk.js","sourcesContent":["export const MenuItems = [\r\n    {\r\n        title: 'Main',\r\n        url: '/uist-2021/data/main',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'Explore',\r\n        url: '/uist-2021/data/explore',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'Q&A',\r\n        url: '/uist-2021/data/qa',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'Speakers',\r\n        url: '/uist-2021/data/speaker',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title:  'About Us',\r\n        url: '/uist-2021/static/about',\r\n        cName: 'nav-links-mobile'\r\n    }\r\n]","import React from 'react'\r\nimport './Button.css'\r\n\r\nconst STYLES = [\r\n    'btn--primary',\r\n    'btn--outline'\r\n]\r\n\r\nconst SIZES = [\r\n    'btn--medium',\r\n    'btn--large'\r\n]\r\n\r\nexport const Button = ({\r\n    children,\r\n    type,\r\n    onClick,\r\n    buttonStyle,\r\n    buttonSize\r\n}) => {\r\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]\r\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0]\r\n\r\n    return(\r\n        <button className={`btn ${checkButtonStyle} ${checkButtonSize}`} onClick={onClick} type={type}>\r\n            {children}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport { Button } from \"../Button\"\r\nimport './Navbar.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n    state = { clicked: false }\r\n    \r\n    handleClick = () => {\r\n        this.setState({ clicked: !this.state.clicked })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <nav className=\"NavbarItems\">\r\n                <h1 className=\"navbar-logo\">UIST 2021</h1>\r\n                <div className=\"menu-icon\" onClick={this.handleClick}>\r\n                    <i className={this.state.clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\r\n                </div>\r\n                <ul className={this.state.clicked ? 'nav-menu active' : 'nav-menu'}>\r\n                    {MenuItems.map( (item, index) => {\r\n                        return(\r\n                            <li key={index} className={item.cName}>\r\n                                <NavLink to={item.url}>{item.title}</NavLink>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n                <Button>\r\n                    <NavLink to=\"/static/about\">About Us</NavLink>\r\n                </Button>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport classnames from 'classnames'\r\n\r\nfunction Segment(props) {\r\n    var Highlight = require('react-highlighter');\r\n    let adjustedStartTime = props.start - 2;\r\n    let adjustedEndTime = props.end;\r\n\r\n    return (\r\n        <div className=\"Segment\">\r\n            <div className = {(props.sequence != null) ? \"SegmentDataContainer\" : \"SegmentDataContainerWithoutId\"}>\r\n                {props.speaker != null &&\r\n                        <div className={\"SegmentSpeakerContainer\"}>\r\n                            {\r\n                                props.start && props.end && \r\n                                (   \r\n                                    <div className=\"SegmentAudioContainer\">\r\n                                        <audio className=\"AudioPlayer\" src={\"http://dev.thomaschen.org/uist2021/\" + props.audioName + \".mp3#t=\" + adjustedStartTime + \",\" + adjustedEndTime} controls/>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            <p className={classnames({\"SegmentSpeakerTime\": !props.label}, {\"SegmentSpeakerText1\": props.speaker === \"0\"}, {\"SegmentSpeakerText2\": props.speaker === \"1\"})}>{props.label} {props.speaker}</p>\r\n                        </div>\r\n                }\r\n                {\r\n                    props.sequence != null ? (\r\n                    <div className={\"SegmentIdContainer\"}>\r\n                        <p className=\"SegmentIdText\">{props.sequence}</p>\r\n                    </div>) : <div></div>\r\n                }\r\n                <div className={\"SegmentTextContainer\"}>\r\n                    {\r\n                        (props.phrase != null && props.isSelected) ?\r\n                        <Highlight className=\"SegmentTextText\" search={props.phrase}>{props.text}</Highlight>\r\n                        :\r\n                        <p className=\"SegmentTextText\">{props.text}</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Segment","import React, { useState, useEffect, useRef } from 'react'\r\nimport Segment from './Segment'\r\nimport \"./SpansView.css\"\r\nimport classnames from 'classnames'\r\n\r\nconst ifArrayIntersect = (array1, array2) => {\r\n    const set2 = new Set(array2);\r\n    for(let i = 0; i < array1.length; i++) {\r\n        if (set2.has(array1[i])) return true;\r\n    }\r\n    return false\r\n}\r\n\r\nfunction TitleView(props) {\r\n    return (\r\n        <div className=\"TitleViewContainer\">\r\n            <div className=\"TitleViewImageContainer\">\r\n                <img className=\"TitleViewImage\" src={props.image}></img>\r\n            </div>\r\n            <div className=\"TitleViewTextContainer\">\r\n                <div className=\"TitleViewTextWrapper\">\r\n                    <div className=\"TitleViewSubtitle\">{props.subtitle ? props.subtitle : \"Subtitle Not Found\"}</div>\r\n                    <div className=\"TitleViewTitle\">{props.title ? props.title : \"Title Not Found\"}</div>\r\n                    <div className=\"TitleViewDate\">{props.date ? props.date : \"Date Not Found\"}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TemporalView(props) {\r\n    const [rawItems, setRawItems] = useState([])\r\n    const [lowItems, setLowItems] = useState([])\r\n    const [medItems, setMedItems] = useState([])\r\n    const [highItems, setHighItems] = useState([])\r\n\r\n    // only run when `raw` changes\r\n    let { raw } = props;\r\n    useEffect(() => {\r\n        if (!props.raw) return;\r\n\r\n        // convert all start-end to % duration\r\n        const absoluteStart = props.raw[0].start\r\n        const absoluteEnd = props.raw[props.raw.length - 1].end\r\n        const duration = absoluteEnd - absoluteStart\r\n        const rawMappedItems = props.raw.map(element => {\r\n            return {\r\n                name: element.id[0],\r\n                duration: (element.end - element.start) / duration,\r\n                ids: element.id\r\n            }\r\n        })\r\n        let rawDurationMap = {}\r\n        rawMappedItems.forEach(e => rawDurationMap[e.name] = e.duration)\r\n\r\n        // convert all other items to width= sum(associated segments duration)\r\n        const lowMappedItems = props.low.map(element => {\r\n            return {\r\n                name: element.id.join(\", \"),\r\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\r\n                ids: element.id\r\n            }\r\n        })\r\n\r\n        const medMappedItems = props.med.map(element => {\r\n            return {\r\n                name: element.id.join(\", \"),\r\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\r\n                ids: element.id\r\n            }\r\n        })\r\n\r\n        const highMappedItems = props.high.map(element => {\r\n            return {\r\n                name: element.id.join(\", \"),\r\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\r\n                ids: element.id\r\n            }\r\n        })\r\n\r\n        setRawItems(rawMappedItems)\r\n        setLowItems(lowMappedItems)\r\n        setMedItems(medMappedItems)\r\n        setHighItems(highMappedItems)\r\n    }, [raw])\r\n\r\n    return (\r\n        <div className=\"temporal\">\r\n            <div className=\"row\">\r\n                <p className=\"label\">Orig</p>\r\n                <div className=\"data raw\">\r\n                    {rawItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => {props.setSelected(element.ids); props.setHighSelected(idx)}}></div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <p className=\"label\">Long</p>\r\n                <div className=\"data low\">\r\n                    {lowItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => {props.setSelected(element.ids); props.setHighSelected(idx)}}></div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <p className=\"label\">Med</p>\r\n                <div className=\"data med\">\r\n                    {medItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => {props.setSelected(element.ids); props.setHighSelected(idx)}}></div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <p className=\"label\">Short</p>\r\n                <div className=\"data high\">\r\n                    {highItems.map((element, idx) =>\r\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\r\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\r\n                            onClick={() => {props.setSelected(element.ids); props.setHighSelected(idx)}}></div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction HighCol(props) {\r\n    // takes in segments prop\r\n    // takes in selectedIds prop\r\n    // takes in setSelected prop\r\n    return (\r\n        <div className=\"SegmentColumn High\">\r\n            <div className=\"ColumnTitleContainer\">\r\n                <h2 className=\"ColumnTitle\">{props.title} Summary</h2>\r\n            </div>\r\n            <div className=\"data\">\r\n                { props.segments\r\n                    .map((segment, idx) =>\r\n                        <div key={idx} \r\n                            onClick={() => {props.setSelected(segment.id)}} \r\n                            className={classnames({'selected': ifArrayIntersect(segment.id, props.selectedIds), \"item\": true})}\r\n                            ref={ifArrayIntersect(segment.id, props.selectedIds) ? props.selectedRef : null}>\r\n                            <Segment \r\n                                text={segment.text} \r\n                                id={segment.id.join(\", \")}\r\n                                sequence={segment.sequence}\r\n                                phrase={segment.phrase ? segment.phrase : null}\r\n                                isSelected={ifArrayIntersect(segment.id, props.selectedIds)}\r\n                                speaker={segment.duration}/>\r\n                        </div>\r\n                    ) }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GenericCol(props) {\r\n    // takes in title prop\r\n    // takes in segments prop\r\n    // takes in selectedIds prop\r\n    return (\r\n        <div className={`SegmentColumn notclickable ${props.title}`}>\r\n            <div className=\"ColumnTitleContainer\">\r\n                <h2 className=\"ColumnTitle\">{props.title} {props.title !== \"Original\" ? \"Summary\" : \"Transcript\"}</h2>\r\n            </div>\r\n            <div className=\"data\">\r\n                { props.segments\r\n                        .filter(segment => ifArrayIntersect(segment.id, props.selectedIds))\r\n                        .map((segment, idx) =>\r\n                            <div key={idx} className={classnames({'selected': true, \"item\": true})}>\r\n                                { (segment.start && segment.end) ?\r\n                                <Segment \r\n                                text={segment.text} id={segment.id.join(\", \")}\r\n                                speaker={segment.speaker ? segment.speaker : null}\r\n                                phrase={segment.phrase ? segment.phrase : null}\r\n                                isSelected={ifArrayIntersect(segment.id, props.selectedIds)}\r\n                                audioName={props.audioName}\r\n                                start={segment.start}\r\n                                end={segment.end}\r\n                                label=\"Speaker\"/>\r\n                                :\r\n                                <Segment \r\n                                    text={segment.text} id={segment.id.join(\", \")}\r\n                                    speaker={segment.speaker ? segment.speaker : null}\r\n                                    phrase={segment.phrase ? segment.phrase : null}\r\n                                    isSelected={ifArrayIntersect(segment.id, props.selectedIds)}\r\n                                    label=\"Speaker\"/>\r\n                                }\r\n                            </div>\r\n                        ) }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SpansView(props) {\r\n    const [selectedIds, setSelectedIds] = useState([])\r\n    const [highSelectedIdx, setHighSelectedIdx] = useState(null)\r\n    const selectedRef = useRef(null);\r\n\r\n    // reset selectedId on audioData change\r\n    let { audioData } = props;\r\n    useEffect(() => setSelectedIds(null), [audioData])\r\n\r\n    // scroll to high segment if out of view when a qualifying segment is chosen\r\n    useEffect(() => {\r\n        if (highSelectedIdx === null){\r\n            return;\r\n        }\r\n\r\n        if (selectedRef.current){\r\n            selectedRef.current.scrollIntoView({\r\n                behavior: \"smooth\",\r\n                block: \"center\"\r\n              });\r\n        }\r\n\r\n    }, [selectedRef, highSelectedIdx]);\r\n\r\n\r\n    if (!props.audioData) {\r\n        return (\r\n            <div>\r\n                <h1>Explore View</h1>\r\n                <p>No audio sample selected</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"Parent\">\r\n            <div className=\"HighSegmentViewColumn\">\r\n                <HighCol title=\"Short\" segments={props.audioData[\"high\"][\"segments\"]} selectedIds={selectedIds} setSelected={setSelectedIds} selectedRef={selectedRef}/>\r\n            </div>\r\n            <div className=\"DataViewColumn\">\r\n                <div>\r\n                    <TitleView title={props.audioData.title} subtitle={props.audioData.subtitle} date={props.audioData.date} audioName={props.audioName} image={props.audioData.image}></TitleView>\r\n                    <TemporalView\r\n                        raw={props.audioData[\"raw\"][\"segments\"]}\r\n                        high={props.audioData[\"high\"][\"segments\"]}\r\n                        med={props.audioData[\"med\"][\"segments\"]}\r\n                        low={props.audioData[\"low\"][\"segments\"]}\r\n                        selectedIds={selectedIds} setSelected={setSelectedIds} setHighSelected={setHighSelectedIdx} />\r\n                </div>\r\n                <div className=\"SegmentColumnContainer\">\r\n                    <GenericCol title=\"Medium\" segments={props.audioData[\"med\"][\"segments\"]} selectedIds={selectedIds} label=\"speaker\"/>\r\n                    <GenericCol title=\"Long\" segments={props.audioData[\"low\"][\"segments\"]} selectedIds={selectedIds} label=\"speaker\"/>\r\n                    <GenericCol title=\"Original\" segments={props.audioData[\"raw\"][\"segments\"]} selectedIds={selectedIds} audioName={props.audioName} label=\"speaker\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpansView\r\n","import React, { Component } from 'react';\r\n\r\nclass QAView extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>QAView</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default QAView","import React from 'react';\r\n\r\nfunction Speech(props) {\r\n    return (\r\n        <div className=\"Speech\">\r\n            <div className={(props.speaker === \"0\") ? \"LeftSpeakerContainer\" : \"RightSpeakerContainer\"}>\r\n                <p className={(props.speaker === \"0\") ? \"LeftText\" : \"RightText\"}>{props.text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Speech","import React from 'react';\r\nimport Speech from './Speech'\r\nimport \"./SpeakerView.css\"\r\n\r\nfunction SpeakerView(props) {\r\n    if (!props.audioData) {\r\n        return (\r\n            <div>\r\n                <h1>Speaker View</h1>\r\n                <p>No audio sample selected</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"SpeakerParentContainer\">\r\n            <div className=\"SpeakerTitleContainer\">\r\n                <h2 className=\"FirstSpeakerTitle\">First Speaker</h2>\r\n                <h2 className=\"SecondSpeakerTitle\">Second Speaker</h2>\r\n            </div>\r\n            <div className=\"SpeakerDataContainer\">\r\n                { props.audioData[\"raw\"][\"segments\"]\r\n                    .map((segment, idx) =>\r\n                        <div key={idx}>\r\n                            <Speech text={segment.text} speaker={segment.speaker}></Speech>\r\n                        </div>\r\n                ) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SpeakerView","import React, { Component } from 'react';\r\n\r\nclass AboutView extends Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>AboutView</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AboutView","import React from 'react';\nimport classnames from 'classnames'\n\nfunction Segment(props) {\n    let adjustedStartTime = props.start - 2;\n    let adjustedEndTime = props.end;\n    let segmentEnd = '';\n\n    if (props.text.slice(-1) === '.' || props.text.slice(-1) === '?'){\n        segmentEnd = ' ';\n    }\n\n    return (\n        <span className=\"SegmentText\" >{props.text}{segmentEnd}</span>\n    )\n}\nexport default Segment","import React from 'react';\nimport classnames from 'classnames'\n\nfunction Segment(props) {\n    let adjustedStartTime = props.start == 0 ? props.start : props.start - 2;\n    let adjustedEndTime = props.end;\n\n    return (\n        <div className=\"AudioSegment\">\n            {\n                props.start && props.end && \n                (   \n                    <div className=\"AudioSegmentPlayerContainer\">\n                        <audio id=\"player\" className=\"AudioPlayer\" src={\"http://dev.thomaschen.org/uist2021/\" + props.audioName + \".mp3#t=\" + adjustedStartTime + \",\" + adjustedEndTime} controls/>\n                        {\n                            /*\n                            TODO: Fix prop loading order bug\n                            <div className=\"AudioControls\"> \n                            <button onclick={document.getElementById('player').play()}>Play</button> \n                            <button onclick={document.getElementById('player').pause()}>Pause</button> \n                            <button onclick={document.getElementById('player').volume != 1.0 ? document.getElementById('player').volume += 0.1 : document.getElementById('player').volume = 1.0}>Vol +</button> \n                            <button onclick={document.getElementById('player').volume -= 0.1}>Vol -</button> \n                            </div>\n                            */\n                        }\n                    </div>\n                )\n            }\n        </div>\n    )\n}\nexport default Segment","import React, { useState, useEffect, useRef } from 'react'\nimport SimpleSegment from './SimpleSegment'\nimport AudioSegment from './AudioSegment'\nimport \"./UnifiedView.css\"\nimport classnames from 'classnames'\n\nconst ifArrayIntersect = (array1, array2) => {\n    const set2 = new Set(array2);\n    for(let i = 0; i < array1.length; i++) {\n        if (set2.has(array1[i])) return true;\n    }\n    return false\n}\n\nfunction TitleView(props) {\n    return (\n        <div className=\"TitleViewContainer\">\n            <div className=\"TitleViewImageContainer\">\n                <img className=\"TitleViewImage\" src={props.image}></img>\n            </div>\n            <div className=\"TitleViewTextContainer\">\n                <div className=\"TitleViewTextWrapper\">\n                    <div className=\"TitleViewSubtitle\">{props.subtitle ? props.subtitle : \"Subtitle Not Found\"}</div>\n                    <div className=\"TitleViewTitle\">{props.title ? props.title : \"Title Not Found\"}</div>\n                    <div className=\"TitleViewDate\">{props.date ? props.date : \"Date Not Found\"}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction TemporalView(props) {\n    const [rawItems, setRawItems] = useState([])\n    const [highItems, setHighItems] = useState([])\n\n    // only run when `raw` changes\n    let { raw } = props;\n    useEffect(() => {\n        if (!props.raw) return;\n\n        // convert all start-end to % duration\n        const absoluteStart = props.raw[0].start\n        const absoluteEnd = props.raw[props.raw.length - 1].end\n        const duration = absoluteEnd - absoluteStart\n        const rawMappedItems = props.raw.map(element => {\n            return {\n                name: element.id[0],\n                duration: (element.end - element.start) / duration,\n                ids: element.id\n            }\n        })\n        let rawDurationMap = {}\n        rawMappedItems.forEach(e => rawDurationMap[e.name] = e.duration)\n\n        // convert all other items to width= sum(associated segments duration)\n\n        const highMappedItems = props.high.map(element => {\n            return {\n                name: element.id.join(\", \"),\n                duration: element.id.reduce((p, c) => p + rawDurationMap[c], 0), // cumulative duration of all associated segments\n                ids: element.id,\n                info: element.information_contained,\n                quality: element.quality\n            }\n        })\n\n        setRawItems(rawMappedItems)\n        setHighItems(highMappedItems)\n    }, [raw])\n\n    return (\n        <div className=\"temporal\">\n            <div className=\"row\">\n                <p className=\"startTimestamp\">0:00</p>\n                <div className=\"data high\">\n                    {highItems.map((element, idx) =>\n                        <div key={idx} className={classnames({\"selected\": ifArrayIntersect(element.ids, props.selectedIds), \"item\": true})}\n                            style={{flex: `${(element.duration * 100).toFixed(2)} 1 auto`}}\n                            onClick={() => {onTemporalSegmentclick(props, element.ids, idx)}}></div>)}\n                </div>\n                <p className=\"endTimestamp\">{Math.trunc(props.raw[raw.length - 1].end/60)}:{Math.round(props.raw[raw.length - 1].end%60)}</p>\n            </div>\n        </div>\n    )\n}\n\nfunction getTotalInfo(highSums, rawSums, ids){\n    console.log(\"GET TOTAL INFO:\")\n\n    let baseShortInfoTotal = 0;\n    highSums.forEach(e => baseShortInfoTotal += e.information_contained);\n\n    let deltaInfo = 0.0;\n    if (ids != null) {\n        ids.forEach(e => {\n            deltaInfo = deltaInfo + highSums[e].delta;\n        })\n    }\n    \n    let totalInfo = baseShortInfoTotal + deltaInfo;\n    return (totalInfo * 100).toFixed(2);\n    // Debug checking only\n    /*\n    let highTotal = 0.0;\n    highSums.forEach(e => {\n        highTotal = highTotal + e.information_contained;\n    })\n    let deltaTotal = 0.0;\n    highSums.forEach(e => {\n        deltaTotal = deltaTotal + e.delta;\n    })\n    console.log(\"DELTATOTAL:\" + deltaTotal)\n    console.log(\"HIGHTOTAL:\" + highTotal);\n    let rawTotal = 0.0;\n    rawSums.forEach(e => {\n        rawTotal = rawTotal + e.info_gain;\n    })\n    console.log(\"RAWTOTAL:\" + rawTotal);\n    let combined = highTotal+rawTotal;\n    console.log(\"HIGHTOTAL+RAWTOTAL: \" + combined);\n    */\n}\n\nfunction onTemporalSegmentclick(props, ids, idx){\n    props.setSelected(ids);\n    props.setHighSelected(idx);\n    if (idx != null) {\n        let tempLifeTimeSelected = props.lifetimeSelectedIds;\n        if (!props.lifetimeSelectedIds.includes(idx)){\n                tempLifeTimeSelected.push(idx);\n                props.setLifetimeSelectedIds(tempLifeTimeSelected);\n        }\n    }\n}\n\nfunction onSegmentClick(props, id, idx){\n    props.setSelected(id);\n\n    if (idx != null) {\n        let tempLifeTimeSelected = props.lifetimeSelectedIds;\n        if (!props.lifetimeSelectedIds.includes(idx)){\n                tempLifeTimeSelected.push(idx);\n                props.setLifetimeSelectedIds(tempLifeTimeSelected);\n        }\n    }\n}\n\nfunction MainSummary(props) {\n    // takes in segments prop\n    // takes in selectedIds prop\n    // takes in setSelected prop\n    return (\n        <div className=\"Summary\">\n            <div className=\"SummaryTitleContainer\">\n                <h2 className=\"SummaryTitle\">\n                    <span>{props.title} Summary</span>\n                </h2>\n                <h2 className=\"InfoDisplayLabel\">Information Displayed: <span className=\"InfoDisplayValue\">\n                {\n                    getTotalInfo(props.segments, props.rawSegments, props.lifetimeSelectedIds)\n                } %\n                </span></h2>\n            </div>\n            <div className=\"MainDataSegments\">\n                { props.segments\n                    .map((segment, idx) =>\n                        <span key={idx} \n                        onClick={() => {onSegmentClick(props, segment.id, idx)}} \n                        className={classnames({'selected': ifArrayIntersect(segment.id, props.selectedIds), \"item\": true})}\n                        ref={ifArrayIntersect(segment.id, props.selectedIds) ? props.selectedRef : null}>\n                        <SimpleSegment \n                            text={segment.text} \n                            id={segment.id.join(\", \")}\n                            sequence={segment.sequence}\n                            phrase={segment.phrase ? segment.phrase : null}\n                            isSelected={ifArrayIntersect(segment.id, props.selectedIds)}\n                            speaker={segment.duration}/>\n                        </span>\n                    ) }\n            </div>\n        </div>\n    );\n}\n\nfunction getStartTime(array){\n    if (array[0] != null) {\n        return array[0].start;\n    }\n}\n\nfunction getEndTime(array){\n    if (array[0] != null) {\n        return array[array.length - 1].end;\n    }\n}\n\nfunction DetailSummary(props) {\n    return (\n        <div className={`DetailModal notclickable ${props.title}`}>\n            <div className=\"ColumnHeader\">\n                <div className=\"ColumnTitleContainer\">\n                    <h2 className=\"ColumnTitle\">{props.title} {props.title !== \"Original\" ? \"Summary\" : \"Transcript\"}</h2>\n                </div>\n                {\n                        props.segments\n                        .filter(segment => ifArrayIntersect(segment.id, props.selectedIds)) != null &&\n                        props.audioName &&\n                        <AudioSegment \n                        audioName={props.audioName}\n                        start={getStartTime(props.segments\n                            .filter(segment => ifArrayIntersect(segment.id, props.selectedIds)))}\n                        end={getEndTime(props.segments\n                            .filter(segment => ifArrayIntersect(segment.id, props.selectedIds)))}/>\n                }\n            </div>\n            <div className=\"DetailDataSegments\">\n                { \n                    props.segments\n                        .filter(segment => ifArrayIntersect(segment.id, props.selectedIds))\n                        .map((segment, idx) =>\n                            <span key={idx} className={classnames({'selected': true, \"item\": true})}>\n                                <SimpleSegment \n                                    text={segment.text} id={segment.id.join(\", \")}\n                                    speaker={segment.speaker ? segment.speaker : null}\n                                    phrase={segment.phrase ? segment.phrase : null}\n                                    isSelected={ifArrayIntersect(segment.id, props.selectedIds)}\n                                    label=\"Speaker\"/>\n                            </span>\n                        ) \n                }\n            </div>\n        </div>\n    );\n}\n\nfunction UnifiedView(props) {\n    const [selectedIds, setSelectedIds] = useState([])\n    const [highSelectedIdx, setHighSelectedIdx] = useState(null)\n    const [lifetimeSelectedIds, setLifetimeSelectedIds] = useState([])\n    const [informationShown, setInformationShown] = useState(0)\n    const selectedRef = useRef(null);\n    const detailRef = useRef(null);\n\n    // reset selectedId on audioData change\n    let { audioData } = props;\n    useEffect(() => setSelectedIds(null), [audioData])\n    useEffect(() => setLifetimeSelectedIds([]), [audioData])\n\n    // scroll to high segment if out of view when a qualifying segment is chosen\n    useEffect(() => {\n        if (highSelectedIdx === null){\n            return;\n        } \n\n        if (selectedRef.current){\n            selectedRef.current.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\"\n              });\n        }\n\n    }, [selectedRef, highSelectedIdx]);\n\n\n    if (!props.audioData) {\n        return (\n            <div>\n                <h1>Unified View</h1>\n                <p>No audio sample selected</p>\n            </div>\n        )\n    }\n    const right = document.querySelector(\".DetailView\");\n\n    // Scrolls the detail view up when the sentence ref is clicked\n    const setSelected = (ids) => {\n        setSelectedIds(ids);\n\n        detailRef.current.scrollTo({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        });\n\n        // Would store all exposed asr segment ids for the lifetime of the session\n        /*\n        let tempLifeTimeSelected = lifetimeSelectedIdx;\n        if (selectedIds != null) {\n            selectedIds.forEach(e => {\n                if (!tempLifeTimeSelected.includes(e)){\n                    tempLifeTimeSelected.push(e);\n                }\n            })\n        }\n\n        setLifetimeSelectedIdx(tempLifeTimeSelected);\n        */\n    }\n\n    return (\n        <div className=\"Wrapper\">\n            <div className=\"DataParent\">\n                <div className=\"SummaryView\">\n                    <MainSummary title=\"\" rawSegments={props.audioData[\"raw\"][\"segments\"]} segments={props.audioData[\"high\"][\"segments\"]} selectedIds={selectedIds} setSelected={setSelected} selectedRef={selectedRef} lifetimeSelectedIds={lifetimeSelectedIds} setLifetimeSelectedIds={setLifetimeSelectedIds} informationShown={informationShown} setInformationShown={setInformationShown}/>\n                    <TemporalView\n                            raw={props.audioData[\"raw\"][\"segments\"]}\n                            high={props.audioData[\"high\"][\"segments\"]}\n                            med={props.audioData[\"med\"][\"segments\"]}\n                            low={props.audioData[\"low\"][\"segments\"]}\n                            selectedIds={selectedIds} setSelected={setSelectedIds} setHighSelected={setHighSelectedIdx} lifetimeSelectedIds={lifetimeSelectedIds} setLifetimeSelectedIds={setLifetimeSelectedIds} />\n                </div>\n                <div className=\"DetailView\" ref={detailRef}>\n                    <DetailSummary title=\"Intermediate\" segments={props.audioData[\"med\"][\"segments\"]} selectedIds={selectedIds} label=\"speaker\"/>\n                    <DetailSummary title=\"Initial\" segments={props.audioData[\"low\"][\"segments\"]} selectedIds={selectedIds} label=\"speaker\"/>\n                    <DetailSummary title=\"Original\" segments={props.audioData[\"raw\"][\"segments\"]} selectedIds={selectedIds} audioName={props.audioName} label=\"speaker\"/>\n                </div>\n            </div>\n            <TitleView title={props.audioData.title} subtitle={props.audioData.subtitle} date={props.audioData.date} audioName={props.audioName} image={props.audioData.image}></TitleView>\n        </div>\n    )\n}\n\nexport default UnifiedView","import React, { useState, useEffect } from 'react'\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport SpansView from \"../SpansView/SpansView\"\r\nimport QAView from \"../QAView/QAView\"\r\nimport SpeakerView from \"../SpeakerView/SpeakerView\"\r\nimport './DataContainer.css'\r\nimport AboutView from '../AboutView/AboutView'\r\nimport UnifiedView from '../UnifiedView/UnifiedView'\r\n\r\n\r\nfunction DataContainer(props) {\r\n    const [audioData, setAudioData] = useState(null)\r\n\r\n    // fetch data on audioName change\r\n    let { audioName } = props;\r\n    useEffect(() => {\r\n        if (!audioName) return;\r\n\r\n        const fetchData = () => {\r\n            fetch(`../data/${audioName}.json`, {\r\n                headers : { \r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                    }\r\n                })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    setAudioData(data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        };\r\n        \r\n        fetchData();\r\n    }, [audioName]);\r\n\r\n    return (\r\n        <div className=\"DataContainer\">\r\n            <Switch>\r\n                <Route path=\"/uist-2021/data/main\">\r\n                    <UnifiedView audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/data/explore\">\r\n                    <SpansView audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/data/qa\">\r\n                    <QAView audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/data/speaker\">\r\n                    <SpeakerView audioName={props.audioName} audioData={audioData}/>\r\n                </Route>\r\n                <Route path=\"/uist-2021/static/about\">\r\n                    <AboutView />\r\n                </Route>\r\n                <Route>\r\n                    <p>Welcome! Navigate to the Explore Page to Begin.</p>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataContainer","import React, { Component } from 'react';\r\nimport './AudioSelector.css'\r\n\r\nclass AudioSelector extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"AudioSelectionContainer\">\r\n                <p className=\"CurrentAudioLabel\">Currently Analyzing Audio: <strong>{!this.props.selectedAudio ? <samp className=\"NoAudioSelectedText\">No Audio Selected</samp> : this.props.selectedAudio}</strong></p>\r\n                <div>\r\n                    <label className=\"SelectAudioLabel\">Select an Audio:</label>\r\n                    <select \r\n                        className=\"AudioSelector\"\r\n                        name=\"AudioSelect\"\r\n                        onChange={e => this.props.onChange(e.target.value)}\r\n                    >\r\n                        <option defaultValue selected disabled>Please Select An Audio</option>\r\n                        {this.props.audios.map((audio) => (\r\n                            <option key={audio.id}>\r\n                            {audio.value}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AudioSelector","import Navbar from \"./components/Navbar/Navbar\"\nimport DataContainer from \"./components/DataContainer/DataContainer\"\nimport AudioSelector from \"./components/AudioSelector/AudioSelector\"\nimport AudioIndexData from \"./data/index.json\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport './App.css';\nimport React from \"react\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      audios: AudioIndexData,\n      selectedAudio: \"\"\n    }\n  }\n\n  handleChange = audio => {\n    if (audio === \"\") {\n        this.setState({ selectedAudio: \"\"})\n        this.setState({ selectedAudioData: \"\"})\n        return;\n    }\n\n    this.setState({ selectedAudio: audio });\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <Router>\n          <Navbar/>\n          <AudioSelector audios={this.state.audios} selectedAudio={this.state.selectedAudio} onChange={this.handleChange} />\n          <DataContainer audioName={this.state.selectedAudio}/>\n        </Router>\n      </div>\n    )\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}